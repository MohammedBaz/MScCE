Of course. You want a simpler solution: a single Streamlit app that contains the survey questions and collects the answers. This is a much more direct approach.

Here is the complete code for a Streamlit app that does exactly that.

### \#\# How to Use This Solution

1.  **Save the Code:** Save the code below as a Python file (e.g., `survey_app.py`).
2.  **Install Libraries:** If you haven't already, open your terminal and install Streamlit and Pandas:
    ```bash
    pip install streamlit pandas
    ```
3.  **Run the App:** In your terminal, navigate to where you saved the file and run:
    ```bash
    streamlit run survey_app.py
    ```

Your web browser will open with the interactive survey app.

-----

### \#\# Streamlit Survey App Code

```python
# survey_app.py
import streamlit as st
import pandas as pd

# --- Data Preparation ---
# 1. Store all your questions and sections in a structured way (a list of dictionaries)
survey_data = [
    {"Section": "ุฃููุงู: ุชูุธูู ุงูููุฑุฑ ูุชุฎุทูุทู", "Statement": "ุชู ุนุฑุถ ุฎุทุฉ ุงูููุฑุฑ ุจุงูุชูุตูู ูู ุจุฏุงูุฉ ุงููุตู ุงูุฏุฑุงุณู."},
    {"Section": "ุฃููุงู: ุชูุธูู ุงูููุฑุฑ ูุชุฎุทูุทู", "Statement": "ุชู ุนุฑุถ ุงูุฏุฑูุณ ุจุฃุดูุงู ูุฃุณุงููุจ ูุฎุชููุฉ ุจุงูุชุนูู ุงูุฅููุชุฑููู."},
    {"Section": "ุฃููุงู: ุชูุธูู ุงูููุฑุฑ ูุชุฎุทูุทู", "Statement": "ูุถุญ ุนุถู ููุฆุฉ ุงูุชุฏุฑูุณ ุขููุฉ ุชุตุญูุญ ุงูุงุฎุชุจุงุฑุงุช ูุงูุฃูุดุทุฉ ูุงูุชููููุงุช."},
    {"Section": "ุฃููุงู: ุชูุธูู ุงูููุฑุฑ ูุชุฎุทูุทู", "Statement": "ุฃุชูุญ ูู ููููุฉ ุงูุญุตูู ุนูู ุงูุฎุฏูุงุช ุงูุฃูุงุฏูููุฉ ูู ุงูููุฑุฑ ูุซู ุงูุฅุฑุดุงุฏ ุงูุฃูุงุฏูููุ ูุฑูุน ุงูุบูุงุจ."},
    {"Section": "ุซุงููุงู: ุงูุชูุงุตู ูุงูุชูุงุนู", "Statement": "ุฃุชุงุญ ุงูุชุนูู ุงูุฅููุชุฑููู ููุง ูุฑุต ูุชูุงูุฆุฉ ูู ุงููุดุงุฑูุฉ ุฃุซูุงุก ุงููุญุงุถุฑุฉ."},
    {"Section": "ุซุงููุงู: ุงูุชูุงุตู ูุงูุชูุงุนู", "Statement": "ุฃุชุงุญ ูู ุงูุชุนูู ุงูุฅููุชุฑููู ุงูุชูุงุตู ูุน ุนุถู ููุฆุฉ ุงูุชุฏุฑูุณ."},
    {"Section": "ุซุงููุงู: ุงูุชูุงุตู ูุงูุชูุงุนู", "Statement": "ุชุชููุฑ ุงูุซุฑ ูู ูุณููุฉ ููุชูุงุตู ูุน ุนุถู ููุฆุฉ ุงูุชุฏุฑูุณ."},
    {"Section": "ุซุงููุงู: ุงูุชูุงุตู ูุงูุชูุงุนู", "Statement": "ูุชุงุญ ูู ูู ุงูุชุนูู ุงูุฅููุชุฑููู ููุงูุดุฉ ุฒููุงุฆู ูููุง ูุฑุชุจุท ุจุงูููุฑุฑ ูุฃูุดุทุชู."},
    {"Section": "ุซุงููุงู: ุงูุชูุงุตู ูุงูุชูุงุนู", "Statement": "ูุชููุฑ ููุง ุงูุฏุนู ุงูููู ูู ุงูุชุนูู ุงูุฅููุชุฑููู."},
    {"Section": "ุซุงููุงู: ุงูุชูุงุตู ูุงูุชูุงุนู", "Statement": "ุชูููุช ุชุบุฐูุฉ ุฑุงุฌุนุฉ ุนู ุฃุฏุงุฆู ูู ุจุนุถ ุงูููุงู ูู ูุจู ุนุถู ููุฆุฉ ุงูุชุฏุฑูุณ."},
    {"Section": "ุซุงููุงู: ุงูุชูุงุตู ูุงูุชูุงุนู", "Statement": "ุงุดุนุฑ ุจุงููุชุนุฉ ูู ุงูุฏุฑุงุณุฉ ูู ุฎูุงู ุงูุชุนูู ุงูุฅููุชุฑููู."},
    {"Section": "ุซุงูุซุงู: ุนูุงุตุฑ ุชุตููู ุงูููุฑุฑ ููุณุงุฆุทู ุงููุชุนุฏุฏุฉ", "Statement": "ุชููุนุช ุงููุณุงุฆุท ุงูุชุนููููุฉ ุงูุชู ุชู ุนุฑุถ ุงูููุฑุฑ ุจูุง."},
    {"Section": "ุซุงูุซุงู: ุนูุงุตุฑ ุชุตููู ุงูููุฑุฑ ููุณุงุฆุทู ุงููุชุนุฏุฏุฉ", "Statement": "ุชู ุชูููุฐ ูุนุฑุถ ุงูููุฑุฑ ุจุฃุณููุจ ุดูู ุจุงูุชุนูู ุงูุฅููุชุฑููู."},
    {"Section": "ุซุงูุซุงู: ุนูุงุตุฑ ุชุตููู ุงูููุฑุฑ ููุณุงุฆุทู ุงููุชุนุฏุฏุฉ", "Statement": "ุชุซููู ุงูุชุฏุฑูุจ ูุงูุฅุฑุดุงุฏ ุนู ููููุฉ ุงูุงุณุชูุงุฏุฉ ุงููุตูู ูู ุงูุชุนูู ุงูุฅููุชุฑููู."},
    {"Section": "ุซุงูุซุงู: ุนูุงุตุฑ ุชุตููู ุงูููุฑุฑ ููุณุงุฆุทู ุงููุชุนุฏุฏุฉ", "Statement": "ุฃุชุงุญุช ูู ุงูุฃูุดุทุฉ ุงูุชุนููููุฉ ูุฃุฏูุงุช ุงูููุฑุฑ ูุฑุตุฉ ููุชูุงุนู ูุน ุงููุญุชูู."},
    {"Section": "ุซุงูุซุงู: ุนูุงุตุฑ ุชุตููู ุงูููุฑุฑ ููุณุงุฆุทู ุงููุชุนุฏุฏุฉ", "Statement": "ุชูููุช ูู ูุชุงุจุนุฉ ูุง ุชุบูุจุช ุนูู ูู ุงูุฏุฑูุณ ูู ุฎูุงู ุงูุชุนูู ุงูุฅููุชุฑููู."},
    {"Section": "ุซุงูุซุงู: ุนูุงุตุฑ ุชุตููู ุงูููุฑุฑ ููุณุงุฆุทู ุงููุชุนุฏุฏุฉ", "Statement": "ุดุฌุนูู ุงูุชุนูู ุงูุฅููุชุฑููู ุนูู ุงูุชุนูู ุงููุณุชูุฑ."},
    {"Section": "ุซุงูุซุงู: ุนูุงุตุฑ ุชุตููู ุงูููุฑุฑ ููุณุงุฆุทู ุงููุชุนุฏุฏุฉ", "Statement": "ุชุญุณูุช ููุงุฑุชู ูู ุงุณุชุฎุฏุงู ุงูุชูููููุฌูุง ูุงูุงุชุตุงูุช ูู ุฎูุงู ุงูุชุนูู ุงูุฅููุชุฑููู."},
    {"Section": "ุฑุงุจุนุงู: ุงูููุงุฏ ุงูุชุนููููุฉ ูุงูุชููููุงุช", "Statement": "ุงุฑุชุจุทุช ุฃูุฏุงู ุงููุญุฏุงุช ุงูุฏุฑุงุณูุฉ ุจุงูุฃูุฏุงู ุงูุนุงูุฉ ููููุฑุฑ."},
    {"Section": "ุฑุงุจุนุงู: ุงูููุงุฏ ุงูุชุนููููุฉ ูุงูุชููููุงุช", "Statement": "ุงูุฃูุดุทุฉ ูุงูุชููููุงุช ุงูุชู ุชู ุชูููุฐูุง ุจุงูุชุนูู ุงูุฅููุชุฑููู ูุฑุชุจุทุฉ ุจุงูููุฑุฑ."},
    {"Section": "ุฑุงุจุนุงู: ุงูููุงุฏ ุงูุชุนููููุฉ ูุงูุชููููุงุช", "Statement": "ูุชู ูู ุฎูุงู ุงูุชุนูู ุงูุฅููุชุฑููู ุชูุฏูู ุชุบุฐูุฉ ุฑุงุฌุนุฉ ููุฑูุฉ ุจุนุฏ ุงูุงุฎุชุจุงุฑ."},
    {"Section": "ุฑุงุจุนุงู: ุงูููุงุฏ ุงูุชุนููููุฉ ูุงูุชููููุงุช", "Statement": "ูููุฑ ุงูุชุนูู ุงูุฅููุชุฑููู ููุช ุงูุทุงูุจ."},
    {"Section": "ุฎุงูุณุงู: ุงูุฑุถุง ุงูุนุงู ุนู ุงูููุฑุฑ ูุนุถู ููุฆุฉ ุงูุชุฏุฑูุณ", "Statement": "ุดุนุฑ ุจุงูุฑุถุง ุนู ุดุฑุญ ุนุถู ููุฆุฉ ุงูุชุฏุฑูุณ ูู ุงูููุฑุฑ ูู ุฎูุงู ุงูุชุนูู ุงูุฅููุชุฑููู."},
    {"Section": "ุฎุงูุณุงู: ุงูุฑุถุง ุงูุนุงู ุนู ุงูููุฑุฑ ูุนุถู ููุฆุฉ ุงูุชุฏุฑูุณ", "Statement": "ุจุดูู ุนุงู ุฃูุง ุฑุงุถู ุนู ูุฐุง ุงูููุฑุฑ."},
]

# Create a DataFrame from the list of dictionaries
df = pd.DataFrame(survey_data)

# 2. Define the answer choices for the Likert scale
answer_options = [
    "ูุง ุฃูุงูู ุจุดุฏุฉ",  # Strongly Disagree
    "ูุง ุฃูุงูู",      # Disagree
    "ุฃูุงูู ุงูู ุญุฏ ูุง", # Neutral / Agree to some extent
    "ุฃูุงูู",        # Agree
    "ุฃูุงูู ุจุดุฏุฉ"     # Strongly Agree
]

# --- Streamlit App UI ---
st.set_page_config(layout="wide")

st.title("๐ ุชูููู ุชุฌุฑุจุฉ ุงูุชุนูู ุงูุฅููุชุฑููู")
st.markdown("---")

# Use a form to group all the radio buttons. This ensures all answers are collected at once on submit.
with st.form(key='survey_form'):
    
    responses = {}
    current_section = ""

    # Loop through each question in the DataFrame
    for index, row in df.iterrows():
        # Display a new section header if the section changes
        if row['Section'] != current_section:
            current_section = row['Section']
            st.header(current_section)
        
        # Display the question and the radio buttons for the answers
        # The unique key is essential for Streamlit to track each question's answer
        question_key = f"q_{index}"
        responses[question_key] = st.radio(
            label=row['Statement'],
            options=answer_options,
            horizontal=True,
            key=question_key
        )
    
    # Add a submit button to the form
    submit_button = st.form_submit_button(label='ุฅุฑุณุงู ุงูุฅุฌุงุจุงุช (Submit Survey)')

# --- After Submission Logic ---
if submit_button:
    st.markdown("---")
    st.header("ุดูุฑุงู ูู! ุชู ุชุณุฌูู ุฅุฌุงุจุงุชู.")
    st.balloons()
    
    # Prepare the data for display and download
    results_data = []
    for index, row in df.iterrows():
        question_key = f"q_{index}"
        results_data.append({
            "Section": row['Section'],
            "Statement": row['Statement'],
            "Response": responses[question_key]
        })
    
    results_df = pd.DataFrame(results_data)
    
    # Display the results in a table
    st.dataframe(results_df)

    # Function to convert DataFrame to CSV for downloading
    @st.cache_data
    def convert_df_to_csv(df_to_convert):
        # IMPORTANT: Cache the conversion to prevent computation on every rerun
        return df_to_convert.to_csv(index=False).encode('utf-8-sig') # Use utf-8-sig for Arabic compatibility

    csv = convert_df_to_csv(results_df)

    # Add a download button for the results
    st.download_button(
        label="๐ฅ ุชุญููู ุงูุฅุฌุงุจุงุช ูููู CSV (Download Responses as CSV)",
        data=csv,
        file_name='survey_responses.csv',
        mime='text/csv',
    )
```
